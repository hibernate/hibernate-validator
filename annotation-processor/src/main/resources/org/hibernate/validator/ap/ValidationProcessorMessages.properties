# Contains error messages to be used by the ConstraintValidationProcessor.

ONLY_GETTERS_MAY_BE_ANNOTATED=Constraint annotations must not be specified at methods, which are no valid JavaBeans getter methods.
NOT_SUPPORTED_TYPE=The annotation @{0} is disallowed for this data type.
NOT_SUPPORTED_RETURN_TYPE=The annotation @{0} is disallowed for the return type of this method.
NOT_FOUND_UNWRAPPED_TYPE=The constraint is marked for unwrapping but the annotation processor was not able to determine the unwrapped type. No further checks are performed.
ONLY_CONSTRAINT_ANNOTATIONS_MAY_BE_ANNOTATED=Constraint annotations must not be specified at annotation types, which are no constraint annotation types themselves.
STATIC_METHODS_MAY_NOT_BE_ANNOTATED=Only non-static methods may be annotated with constraint annotations.
STATIC_FIELDS_MAY_NOT_BE_ANNOTATED=Only non-static fields may be annotated with constraint annotations.
INVALID_DIAGNOSTIC_KIND_GIVEN=The given value {0} is no valid diagnostic kind. Kind.ERROR will be used.
ATVALID_NOT_ALLOWED_AT_PRIMITIVE_FIELD=Fields of a primitive type must not annotated with @Valid.
ATVALID_NOT_ALLOWED_AT_METHOD_RETURNING_PRIMITIVE_TYPE=Methods returning a primitive type must not annotated with @Valid.
CONSTRAINT_TYPE_WITH_MISSING_OR_WRONG_RETENTION=Constraint annotation types must be annotated with @Retention(RUNTIME).
CONSTRAINT_TYPE_WITH_WRONG_TARGET=Constraint annotation types must have at least one of the element types FIELD, METHOD, TYPE or ANNOTATION_TYPE as target.
CONSTRAINT_TYPE_WITHOUT_VALIDATOR=No constraint validators are declared in the 'validatedBy()' attribute of the constraint declaration, make sure that they are declared either programmatically, in the XML configuration or via the service loader.
CONSTRAINT_TYPE_MUST_DECLARE_MESSAGE_MEMBER=Constraint annotation types must declare a member 'String message()'.
RETURN_TYPE_MUST_BE_STRING=Return type of constraint annotation type member 'message()' must be 'String'.
CONSTRAINT_TYPE_MUST_DECLARE_GROUPS_MEMBER=Constraint annotation types must declare a member 'Class<?>[] groups() default {}'.
RETURN_TYPE_MUST_BE_CLASS_ARRAY=Return type of constraint annotation type member 'groups()' must be 'Class<?>[]'.
DEFAULT_VALUE_MUST_BE_EMPTY_ARRAY=Default value of the 'groups()' member must be an empty array.
CONSTRAINT_TYPE_MUST_DECLARE_PAYLOAD_MEMBER=Constraint annotation types must declare a member 'Class<? extends Payload>[] payload() default {}'.
PAYLOAD_RETURN_TYPE_MUST_BE_CLASS_ARRAY=Return type of constraint annotation type member 'payload()' must be 'Class<? extends Payload>[]'.
PAYLOAD_DEFAULT_VALUE_MUST_BE_EMPTY_ARRAY=Default value of the 'payload()' member must be an empty array.
GROUP_SEQUENCE_PROVIDER_ANNOTATION_MUST_BE_DEFINED_ON_A_CLASS=The annotation @GroupSequenceProvider must be defined on a class.
GROUP_SEQUENCE_PROVIDER_ANNOTATION_NOT_ALLOWED_ON_CLASS_WITH_GROUP_SEQUENCE_ANNOTATION=The annotation @GroupSequenceProvider cannot be defined on class annotated with @GroupSequence.
GROUP_SEQUENCE_PROVIDER_ANNOTATION_VALUE_MUST_BE_AN_IMPLEMENTATION_CLASS=The annotation @GroupSequenceProvider must define an implementation or a concrete implementation of DefaultGroupSequenceProvider interface.
GROUP_SEQUENCE_PROVIDER_ANNOTATION_VALUE_DEFINED_PROVIDER_CLASS_WITH_WRONG_TYPE=The annotation @GroupSequenceProvider defines a default group sequence provider for type {0} instead of {1} (super)type.
GROUP_SEQUENCE_PROVIDER_ANNOTATION_VALUE_CLASS_MUST_HAVE_DEFAULT_CONSTRUCTOR=The annotation @GroupSequenceProvider defines a default group sequence provider class without a public default constructor.
ONLY_NON_VOID_METHODS_MAY_BE_ANNOTATED=Void methods may not be annotated with constraint annotations.
CROSS_PARAMETER_TARGET_NOT_INFERABLE=The target of the constraint @{0} cannot be inferred.
CROSS_PARAMETER_CONSTRAINT_VALIDATOR_HAS_INVALID_TYPE=Validator for cross-parameter constraint @{0} does not validate Object nor Object[].
CROSS_PARAMETER_CONSTRAINT_MULTIPLE_VALIDATORS=The constraint @{0} defines multiple cross-parameter validators. Only one is allowed.
CROSS_PARAMETER_VALIDATION_APPLIES_TO_REQUIRED=Constraints with generic as well as cross-parameter validators must define an attribute validationAppliesTo(), but constraint @{0} does not.
CROSS_PARAMETER_VALIDATION_APPLIES_TO_MUST_HAVE_IMPLICIT_DEFAULT_VALUE=Default value of the attribute validationAppliesTo() of the constraint @{0} must be ConstraintTarget\u0023IMPLICIT.
CROSS_PARAMETER_VALIDATION_APPLIES_TO_MUST_HAVE_CONSTRAINT_TARGET_RETURN_TYPE=Return type of the attribute validationAppliesTo() of the constraint @{0} must be jakarta.validation.ConstraintTarget.
CROSS_PARAMETER_VALIDATION_ON_PARAMETERLESS_METHOD=Cross-parameter constraint @{0} is illegally placed on a parameterless method or constructor.
INVALID_SIZE_LENGTH_ANNOTATION_PARAMETERS=Invalid annotation parameters. Both min and max should be greater than or equal to 0 and max should be greater than or equal to min ( min >= 0, max >= 0 and min <= max ).
INVALID_PATTERN_ANNOTATION_PARAMETERS=Invalid annotation parameters. Regular expression given as parameter is invalid.
INVALID_SCRIPT_ASSERT_ANNOTATION_PARAMETERS=Invalid annotation parameters. Script, lang and alias parameters cannot be blank.
INVALID_DIGITS_ANNOTATION_PARAMETERS=Invalid annotation parameters. Fraction and integer should be greater than or equal to 0.
INVALID_DECIMAL_MIN_MAX_ANNOTATION_PARAMETERS=Invalid annotation parameters. Value should be a valid BigDecimal string representation.
INVALID_GROUPS_VALUE_ANNOTATION_PARAMETERS=Invalid annotation parameters. Groups should be represented by interfaces.
INVALID_MESSAGE_VALUE_ANNOTATION_PARAMETERS=Message seems to be malformed. Did you miss a '{}' in the message key?
INCORRECT_METHOD_PARAMETERS_PARALLEL_IMPLEMENTATION_OVERRIDING=Method parameters do not respect inheritance rules. If a subtype overrides/implements a method originally defined in several parallel types of the hierarchy, no parameter constraints may be declared for that method nor parameters be marked for cascaded validation. Parallel method definitions are in: [ {0} ].
INCORRECT_METHOD_PARAMETERS_OVERRIDING=Method parameters do not respect the inheritance rules. In subtypes, no parameter constraints may be declared on overridden or implemented methods, nor may parameters be marked for cascaded validation. Types that contain the overridden methods are: [ {0} ].
INCORRECT_METHOD_RETURN_VALUE_OVERRIDING=Method return value does not respect the inheritance rules. One must not mark a method return value for cascaded validation more than once in a line of a class hierarchy. Overridden method in {0} is already marked with @Valid.
INVALID_GROUP_SEQUENCE_VALUE_NOT_INTERFACES=Invalid @GroupSequence configuration. The value should be represented by interfaces.
INVALID_GROUP_SEQUENCE_VALUE_CYCLIC_DEFINITION=Invalid @GroupSequence configuration. The defined group sequence should be expandable (no cyclic definition).
INVALID_GROUP_SEQUENCE_VALUE_MISSING_HOSTING_BEAN_DECLARATION=Invalid default group sequence redefinition. The value should contain the hosting bean class.
INVALID_GROUP_SEQUENCE_VALUE_MULTIPLE_DECLARATIONS_OF_THE_SAME_INTERFACE=Invalid @GroupSequence configuration. {0} was already declared in this group sequence.
INVALID_GROUP_SEQUENCE_EXTEND_INTERFACES=Having group sequences extending other interfaces is discouraged by the Jakarta Bean Validation specification.
MIXED_LIST_AND_DIRECT_ANNOTATION_DECLARATION=Constraint @{0} is declared both directly and as a list. Which is not allowed.
INVALID_PAYLOAD_UNWRAPPING_VALUE_ANNOTATION_PARAMETERS=Having both Unwrapping.Unwrap and Unwrapping.Skip in the payload is not allowed.
