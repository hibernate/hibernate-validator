# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2013-04-03 09:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: gettingstarted.xml:24
#, no-c-format
msgid "Getting started"
msgstr ""

#. Tag: para
#: gettingstarted.xml:26
#, no-c-format
msgid "This chapter will show you how to get started with Hibernate Validator, the reference implementation (RI) of Bean Validation. For the following quickstart you need:"
msgstr ""

#. Tag: para
#: gettingstarted.xml:32
#, no-c-format
msgid "A JDK &gt;= 6"
msgstr ""

#. Tag: ulink
#: gettingstarted.xml:36
#, no-c-format
msgid "Apache Maven"
msgstr ""

#. Tag: para
#: gettingstarted.xml:40
#, no-c-format
msgid "An Internet connection (Maven has to download all required libraries)"
msgstr ""

#. Tag: title
#: gettingstarted.xml:46
#, no-c-format
msgid "Project set up"
msgstr ""

#. Tag: para
#: gettingstarted.xml:48
#, no-c-format
msgid "In order to use Hibernate Validator within a Maven project, simply add the following dependency to your <filename>pom.xml</filename>:"
msgstr ""

#. Tag: title
#: gettingstarted.xml:50
#, no-c-format
msgid "Hibernate Validator Maven dependency"
msgstr ""

#. Tag: programlisting
#: gettingstarted.xml:52
#, no-c-format
msgid ""
      "&lt;dependency&gt;\n"
      "    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n"
      "    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;\n"
      "    &lt;version&gt;&version;&lt;/version&gt;\n"
      "&lt;/dependency&gt;"
msgstr ""

#. Tag: para
#: gettingstarted.xml:55
#, no-c-format
msgid "This transitively pulls in the dependency to the Bean Validation API (<literal>javax.validation:validation-api:&bvVersion;</literal>)."
msgstr ""

#. Tag: para
#: gettingstarted.xml:59
#, no-c-format
msgid "For the purposes of logging, Hibernate Validator uses the JBoss Logging API. This is an abstraction layer which supports several known logging solutions (e.g. log4j or the logging framework provided by the JDK) as implementation. Just add your preferred logging library to the classpath and all log requests from Hibernate Validator will automatically be delegated to that logging provider."
msgstr ""

#. Tag: para
#: gettingstarted.xml:66
#, no-c-format
msgid "Alternatively, you can explicitely specify a provider using the system property <varname>org.jboss.logging.provider</varname>. Supported values currently are <varname>jboss</varname>, <varname>jdk</varname>, <varname>log4j</varname> and <varname>slf4j</varname>."
msgstr ""

#. Tag: title
#: gettingstarted.xml:73
#, no-c-format
msgid "Unified EL"
msgstr ""

#. Tag: para
#: gettingstarted.xml:75
#, no-c-format
msgid "Hibernate Validator requires an implementation of the Unified Expression Language (<ulink url=\"jcp.org/en/jsr/detail?id=341\">JSR 341</ulink>) for evaluating dynamic expressions in constraint violation messages (see <xref linkend=\"section-message-interpolation\"/>). When your application runs in a Java EE container such as JBoss AS, an EL implementation is already provided by the container. In a Java SE environment, however, you have to add an implementation as dependency to your POM file. For instance you can add the following two dependencies to use the JSR 341 <ulink url=\"http://uel.java.net/\">reference implementation</ulink>:"
msgstr ""

#. Tag: title
#: gettingstarted.xml:87
#, no-c-format
msgid "Maven dependencies for Unified EL reference implementation"
msgstr ""

#. Tag: programlisting
#: gettingstarted.xml:90
#, no-c-format
msgid ""
      "&lt;dependency&gt;\n"
      "    &lt;groupId&gt;javax.el&lt;/groupId&gt;\n"
      "    &lt;artifactId&gt;javax.el-api&lt;/artifactId&gt;\n"
      "    &lt;version&gt;2.2.4&lt;/version&gt;\n"
      "&lt;/dependency&gt;\n"
      "&lt;dependency&gt;\n"
      "    &lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;\n"
      "    &lt;artifactId&gt;javax.el&lt;/artifactId&gt;\n"
      "    &lt;version&gt;2.2.4&lt;/version&gt;\n"
      "&lt;/dependency&gt;"
msgstr ""

#. Tag: title
#: gettingstarted.xml:95
#, no-c-format
msgid "<title>CDI</title>"
msgstr ""

#. Tag: para
#: gettingstarted.xml:97
#, no-c-format
msgid "Bean Validation defines integration points with CDI (Contexts and Dependency Injection for Java<superscript>TM</superscript> EE, <ulink url=\"http://jcp.org/en/jsr/detail?id=346\">JSR 346</ulink>). If your application runs in an environment which does not provide this integration out of the box, you may use the Hibernate Validator CDI portable extension by adding the following Maven dependency to your POM:"
msgstr ""

#. Tag: title
#: gettingstarted.xml:106
#, no-c-format
msgid "Hibernate Validator CDI portable extension Maven dependency"
msgstr ""

#. Tag: programlisting
#: gettingstarted.xml:109
#, no-c-format
msgid ""
      "&lt;dependency&gt;\n"
      "    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n"
      "    &lt;artifactId&gt;hibernate-validator-cdi&lt;/artifactId&gt;\n"
      "    &lt;version&gt;&version;&lt;/version&gt;\n"
      "&lt;/dependency&gt;"
msgstr ""

#. Tag: para
#: gettingstarted.xml:112
#, no-c-format
msgid "Note that adding this dependency is usually not required for applications running on a Java EE application server. You can learn more about the integration of Bean Validation and CDI in section TODO."
msgstr ""

#. Tag: title
#: gettingstarted.xml:119
#, no-c-format
msgid "Applying constraints"
msgstr ""

#. Tag: para
#: gettingstarted.xml:121
#, no-c-format
msgid "Lets dive directly into an example to see how to apply constraints."
msgstr ""

#. Tag: title
#: gettingstarted.xml:125
#, no-c-format
msgid "Class Car annotated with constraints"
msgstr ""

#. Tag: programlisting
#: gettingstarted.xml:127
#, no-c-format
msgid ""
      "package com.mycompany;\n"
      "\n"
      "import javax.validation.constraints.Min;\n"
      "import javax.validation.constraints.NotNull;\n"
      "import javax.validation.constraints.Size;\n"
      "\n"
      "public class Car {\n"
      "\n"
      "    @NotNull\n"
      "    private String manufacturer;\n"
      "\n"
      "    @NotNull\n"
      "    @Size(min = 2, max = 14)\n"
      "    private String licensePlate;\n"
      "\n"
      "    @Min(2)\n"
      "    private int seatCount;\n"
      "    \n"
      "    public Car(String manufacturer, String licencePlate, int seatCount) {\n"
      "        this.manufacturer = manufacturer;\n"
      "        this.licensePlate = licencePlate;\n"
      "        this.seatCount = seatCount;\n"
      "    }\n"
      "\n"
      "    //getters and setters ...\n"
      "}"
msgstr ""

#. Tag: para
#: gettingstarted.xml:130
#, no-c-format
msgid "<classname>@NotNull</classname>, <classname>@Size</classname> and <classname>@Min</classname> are so-called constraint annotations, that we use to declare constraints, which shall be applied to the fields of a <classname>Car</classname> instance:"
msgstr ""

#. Tag: para
#: gettingstarted.xml:137
#, no-c-format
msgid "<property>manufacturer</property> shall never be null"
msgstr ""

#. Tag: para
#: gettingstarted.xml:141
#, no-c-format
msgid "<property>licensePlate</property> shall never be null and must be between 2 and 14 characters long"
msgstr ""

#. Tag: para
#: gettingstarted.xml:146
#, no-c-format
msgid "<property>seatCount</property> shall be at least 2."
msgstr ""

#. Tag: title
#: gettingstarted.xml:152
#, no-c-format
msgid "Validating constraints"
msgstr ""

#. Tag: para
#: gettingstarted.xml:154
#, no-c-format
msgid "To perform a validation of these constraints, we use a <classname>Validator</classname> instance. Let's have a look at a unit test for <classname>Car</classname>:"
msgstr ""

#. Tag: title
#: gettingstarted.xml:159
#, no-c-format
msgid "Class CarTest showing validation examples"
msgstr ""

#. Tag: programlisting
#: gettingstarted.xml:161
#, no-c-format
msgid ""
      "package com.mycompany;\n"
      "\n"
      "import static org.junit.Assert.*;\n"
      "\n"
      "import java.util.Set;\n"
      "\n"
      "import javax.validation.ConstraintViolation;\n"
      "import javax.validation.Validation;\n"
      "import javax.validation.Validator;\n"
      "import javax.validation.ValidatorFactory;\n"
      "\n"
      "import org.junit.BeforeClass;\n"
      "import org.junit.Test;\n"
      "\n"
      "public class CarTest {\n"
      "\n"
      "    private static Validator validator;\n"
      "\n"
      "    @BeforeClass\n"
      "    public static void setUp() {\n"
      "        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();\n"
      "        validator = factory.getValidator();\n"
      "    }\n"
      "\n"
      "    @Test\n"
      "    public void manufacturerIsNull() {\n"
      "        Car car = new Car(null, \"DD-AB-123\", 4);\n"
      "\n"
      "        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =\n"
      "            validator.validate(car);\n"
      "\n"
      "        assertEquals(1, constraintViolations.size());\n"
      "        assertEquals(\"may not be null\", constraintViolations.iterator().next().getMessage());\n"
      "    }\n"
      "\n"
      "    @Test\n"
      "    public void licensePlateTooShort() {\n"
      "        Car car = new Car(\"Morris\", \"D\", 4);\n"
      "\n"
      "        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = \n"
      "            validator.validate(car);\n"
      "\n"
      "        assertEquals(1, constraintViolations.size());\n"
      "        assertEquals(\"size must be between 2 and 14\", constraintViolations.iterator().next().getMessage());\n"
      "    }\n"
      "    \n"
      "    @Test\n"
      "    public void seatCountTooLow() {\n"
      "        Car car = new Car(\"Morris\", \"DD-AB-123\", 1);\n"
      "\n"
      "        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =\n"
      "            validator.validate(car);\n"
      "\n"
      "        assertEquals(1, constraintViolations.size());\n"
      "        assertEquals(\"must be greater than or equal to 2\", constraintViolations.iterator().next().getMessage());\n"
      "    }\n"
      "\n"
      "    @Test\n"
      "    public void carIsValid() {\n"
      "        Car car = new Car(\"Morris\", \"DD-AB-123\", 2);\n"
      "\n"
      "        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =\n"
      "            validator.validate(car);\n"
      "\n"
      "        assertEquals(0, constraintViolations.size());\n"
      "    }\n"
      "}"
msgstr ""

#. Tag: para
#: gettingstarted.xml:164
#, no-c-format
msgid "In the <methodname>setUp()</methodname> method we get a <classname>Validator</classname> instance from the <classname>ValidatorFactory</classname>. A <classname>Validator</classname> instance is thread-safe and may be reused multiple times. For this reason we store it as field of our test class. We can use the <classname>Validator</classname> now to validate the different car instances in the test methods."
msgstr ""

#. Tag: para
#: gettingstarted.xml:172
#, no-c-format
msgid "The <methodname>validate()</methodname> method returns a set of <classname>ConstraintViolation</classname> instances, which we can iterate in order to see which validation errors occurred. The first three test methods show some expected constraint violations:"
msgstr ""

#. Tag: para
#: gettingstarted.xml:179
#, no-c-format
msgid "The <classname>@NotNull</classname> constraint on manufacturer is violated in <methodname>manufacturerIsNull()</methodname>"
msgstr ""

#. Tag: para
#: gettingstarted.xml:184
#, no-c-format
msgid "The <classname>@Size</classname> constraint on licensePlate is violated in <methodname>licensePlateTooShort()</methodname>"
msgstr ""

#. Tag: para
#: gettingstarted.xml:189
#, no-c-format
msgid "The <classname>@Min</classname> constraint on seatCount is violated in <methodname>seatCountTooLow()</methodname>"
msgstr ""

#. Tag: para
#: gettingstarted.xml:194
#, no-c-format
msgid "If the object validates successfully, <methodname>validate()</methodname> returns an empty set."
msgstr ""

#. Tag: para
#: gettingstarted.xml:197
#, no-c-format
msgid "Note that we only use classes from the package <package>javax.validation</package> from the Bean Validation API. As we don't reference any classes of the RI directly, it would be no problem to switch to another implementation of the API, should that need arise."
msgstr ""

#. Tag: title
#: gettingstarted.xml:205
#, no-c-format
msgid "Where to go next?"
msgstr ""

#. Tag: para
#: gettingstarted.xml:207
#, no-c-format
msgid "That concludes our 5 minute tour through the world of Hibernate Validator. Continue exploring the code examples or look at further examples referenced in <xref linkend=\"validator-further-reading\"/>. To deepen your understanding of Hibernate Validator just continue reading <xref linkend=\"validator-usingvalidator\"/>. In case your application has specific validation requirements have a look at <xref linkend=\"validator-customconstraints\"/>."
msgstr ""

