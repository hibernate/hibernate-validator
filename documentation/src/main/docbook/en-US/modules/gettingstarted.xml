<?xml version="1.0" encoding="UTF-8"?>
<!--
	~ JBoss, Home of Professional Open Source
	~ Copyright 2009, Red Hat, Inc. and/or its affiliates, and individual contributors
	~ by the @authors tag. See the copyright.txt in the distribution for a
	~ full listing of individual contributors.
	~
	~ Licensed under the Apache License, Version 2.0 (the "License");
	~ you may not use this file except in compliance with the License.
	~ You may obtain a copy of the License at
	~ http://www.apache.org/licenses/LICENSE-2.0
	~ Unless required by applicable law or agreed to in writing, software
	~ distributed under the License is distributed on an "AS IS" BASIS,
	~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	~ See the License for the specific language governing permissions and
	~ limitations under the License.
-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../hv.ent">
%BOOK_ENTITIES;
]>
<chapter id="validator-gettingstarted">
  <title id="getting-started">Getting started</title>

  <para>This chapter will show you how to get started with Hibernate
  Validator, the reference implementation (RI) of Bean Validation. For the
  following quickstart you need:</para>

  <itemizedlist>
    <listitem>
      <para>A JDK &gt;= 6</para>
    </listitem>

    <listitem>
      <para><ulink url="http://maven.apache.org/">Apache Maven</ulink></para>
    </listitem>

    <listitem>
      <para>An Internet connection (Maven has to download all required
      libraries)</para>
    </listitem>
  </itemizedlist>

  <section id="validator-gettingstarted-createproject">
    <title>Project set up</title>

    <para>In order to use Hibernate Validator within a Maven project, simply
    add the following dependency to your <filename>pom.xml</filename>:<example>
        <title>Hibernate Validator Maven dependency</title>

        <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
    &lt;version&gt;&version;&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
      </example></para>

    <para>This transitively pulls in the dependency to the Bean Validation API
    (<literal>javax.validation:validation-api:&bvVersion;</literal>).</para>

    <section id="validator-gettingstarted-logging">
      <title>Logging</title>

      <para>For the purposes of logging, Hibernate Validator uses the JBoss
      Logging API. This is an abstraction layer which supports several known
      logging solutions (e.g. log4j or the logging framework provided by the
      JDK) as implementation. Just add your preferred logging library as
      dependency to your project and all log requests from Hibernate Validator
      will automatically be delegated to that logging provider.</para>

      <para>If there are several logging implementations part of the
      classpath, you can explicitely specify a provider using the system
      property <varname>org.jboss.logging.provider</varname>. Supported values
      currently are <varname>jboss</varname>, <varname>jdk</varname>,
      <varname>log4j</varname> and <varname>slf4j</varname>.</para>
    </section>

    <section id="validator-gettingstarted-uel">
      <title>Unified EL</title>

      <para>Hibernate Validator requires an implementation of the Unified
      Expression Language (<ulink url="jcp.org/en/jsr/detail?id=341">JSR
      341</ulink>) for evaluating dynamic expressions in constraint violation
      messages (see <xref linkend="section-message-interpolation"/>). When
      your application runs in a Java EE container such as JBoss AS, an EL
      implementation is already provided by the container. In a Java SE
      environment, however, you have to add an implementation as dependency to
      your POM file. For instance you can add the following two dependencies
      to use the JSR 341 <ulink url="http://uel.java.net/">reference
      implementation</ulink>:</para>

      <example>
        <title>Maven dependencies for Unified EL reference
        implementation</title>

        <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;javax.el&lt;/groupId&gt;
    &lt;artifactId&gt;javax.el-api&lt;/artifactId&gt;
    &lt;version&gt;2.2.4&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;
    &lt;artifactId&gt;javax.el&lt;/artifactId&gt;
    &lt;version&gt;2.2.4&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
      </example>
    </section>

    <section id="validator-gettingstarted-cdi">
      <title>CDI</title>

      <para>Bean Validation defines integration points with CDI (Contexts and
      Dependency Injection for Java<superscript>TM</superscript> EE, <ulink
      url="http://jcp.org/en/jsr/detail?id=346">JSR 346</ulink>). If your
      application runs in an environment which does not provide this
      integration out of the box, you may use the Hibernate Validator CDI
      portable extension by adding the following Maven dependency to your
      POM:</para>

      <example>
        <title>Hibernate Validator CDI portable extension Maven
        dependency</title>

        <programlisting>&lt;dependency&gt;
    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
    &lt;artifactId&gt;hibernate-validator-cdi&lt;/artifactId&gt;
    &lt;version&gt;&version;&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
      </example>

      <para>Note that adding this dependency is usually not required for
      applications running on a Java EE application server. You can learn more
      about the integration of Bean Validation and CDI in section TODO.</para>
    </section>
  </section>

  <section id="validator-gettingstarted-createmodel">
    <title>Applying constraints</title>

    <para>Lets dive directly into an example to see how to apply
    constraints.</para>

    <example id="example-class-car">
      <title>Class Car annotated with constraints</title>

      <programlisting language="JAVA" role="JAVA">package org.hibernate.validator.referenceguide.chapter01;

import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

public class Car {

	@NotNull
	private String manufacturer;

	@NotNull
	@Size(min = 2, max = 14)
	private String licensePlate;

	@Min(2)
	private int seatCount;

	public Car(String manufacturer, String licencePlate, int seatCount) {
		this.manufacturer = manufacturer;
		this.licensePlate = licencePlate;
		this.seatCount = seatCount;
	}

	//getters and setters ...
}</programlisting>
    </example>

    <para><classname>@NotNull</classname>, <classname>@Size</classname> and
    <classname>@Min</classname> are so-called constraint annotations, that we
    use to declare constraints, which shall be applied to the fields of a
    <classname>Car</classname> instance:</para>

    <itemizedlist>
      <listitem>
        <para><property>manufacturer</property> shall never be null</para>
      </listitem>

      <listitem>
        <para><property>licensePlate</property> shall never be null and must
        be between 2 and 14 characters long</para>
      </listitem>

      <listitem>
        <para><property>seatCount</property> shall be at least 2.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Validating constraints</title>

    <para>To perform a validation of these constraints, we use a
    <classname>Validator</classname> instance. Let's have a look at a unit
    test for <classname>Car</classname>:</para>

    <example>
      <title>Class CarTest showing validation examples</title>

      <programlisting language="JAVA" role="JAVA">package org.hibernate.validator.referenceguide.chapter01;

import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import org.junit.BeforeClass;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class CarTest {

	private static Validator validator;

	@BeforeClass
	public static void setUp() {
		ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
		validator = factory.getValidator();
	}

	@Test
	public void manufacturerIsNull() {
		Car car = new Car( null, "DD-AB-123", 4 );

		Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =
				validator.validate( car );

		assertEquals( 1, constraintViolations.size() );
		assertEquals( "may not be null", constraintViolations.iterator().next().getMessage() );
	}

	@Test
	public void licensePlateTooShort() {
		Car car = new Car( "Morris", "D", 4 );

		Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =
				validator.validate( car );

		assertEquals( 1, constraintViolations.size() );
		assertEquals(
				"size must be between 2 and 14",
				constraintViolations.iterator().next().getMessage()
		);
	}

	@Test
	public void seatCountTooLow() {
		Car car = new Car( "Morris", "DD-AB-123", 1 );

		Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =
				validator.validate( car );

		assertEquals( 1, constraintViolations.size() );
		assertEquals(
				"must be greater than or equal to 2",
				constraintViolations.iterator().next().getMessage()
		);
	}

	@Test
	public void carIsValid() {
		Car car = new Car( "Morris", "DD-AB-123", 2 );

		Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =
				validator.validate( car );

		assertEquals( 0, constraintViolations.size() );
	}
}</programlisting>
    </example>

    <para>In the <methodname>setUp()</methodname> method we get a
    <classname>Validator</classname> instance from the
    <classname>ValidatorFactory</classname>. A
    <classname>Validator</classname> instance is thread-safe and may be reused
    multiple times. For this reason we store it as field of our test class. We
    can use the <classname>Validator</classname> now to validate the different
    car instances in the test methods.</para>

    <para>The <methodname>validate()</methodname> method returns a set of
    <classname>ConstraintViolation</classname> instances, which we can iterate
    in order to see which validation errors occurred. The first three test
    methods show some expected constraint violations:</para>

    <itemizedlist>
      <listitem>
        <para>The <classname>@NotNull</classname> constraint on manufacturer
        is violated in <methodname>manufacturerIsNull()</methodname></para>
      </listitem>

      <listitem>
        <para>The <classname>@Size</classname> constraint on licensePlate is
        violated in <methodname>licensePlateTooShort()</methodname></para>
      </listitem>

      <listitem>
        <para>The <classname>@Min</classname> constraint on seatCount is
        violated in <methodname>seatCountTooLow()</methodname></para>
      </listitem>
    </itemizedlist>

    <para>If the object validates successfully,
    <methodname>validate()</methodname> returns an empty set.</para>

    <para>Note that we only use classes from the package
    <package>javax.validation</package> from the Bean Validation API. As we
    don't reference any classes of the RI directly, it would be no problem to
    switch to another implementation of the API, should that need
    arise.</para>
  </section>

  <section id="validator-gettingstarted-whatsnext">
    <title>Where to go next?</title>

    <para>That concludes our 5 minute tour through the world of Hibernate
    Validator. Continue exploring the code examples or look at further
    examples referenced in <xref linkend="validator-further-reading"/>. To
    deepen your understanding of Hibernate Validator just continue reading
    <xref linkend="validator-usingvalidator"/>. In case your application has
    specific validation requirements have a look at <xref
    linkend="validator-customconstraints"/>.</para>
  </section>
</chapter>
