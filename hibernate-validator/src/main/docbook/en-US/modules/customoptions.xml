<?xml version="1.0" encoding="UTF-8"?>
<!--
	~ JBoss, Home of Professional Open Source
	~ Copyright 2009, Red Hat, Inc. and/or its affiliates, and individual contributors
	~ by the @authors tag. See the copyright.txt in the distribution for a
	~ full listing of individual contributors.
	~
	~ Licensed under the Apache License, Version 2.0 (the "License");
	~ you may not use this file except in compliance with the License.
	~ You may obtain a copy of the License at
	~ http://www.apache.org/licenses/LICENSE-2.0
	~ Unless required by applicable law or agreed to in writing, software
	~ distributed under the License is distributed on an "AS IS" BASIS,
	~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	~ See the License for the specific language governing permissions and
	~ limitations under the License.
-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../hv.ent">
%BOOK_ENTITIES;
]>
<chapter id="validator-extensions">
  <title>Hibernate Validator extensions</title>

  <note>
    <para>The features described in the following sections are not portable
    between Bean Validation providers/implementations.</para>
  </note>

  <para>In the following sections we are having a closer look at some of the
  Hibernate Validator specific features. This includes the fail fast mode, the
  programmatic constraint configuration API and boolean composition of
  composing constraints.</para>

  <section>
    <title>Fail fast mode</title>

    <para>First off, the fail fast mode. Hibernate Validator allows to return
    from the current validation as soon as the first constraint violation
    occurs. This is called the <emphasis>fail fast mode</emphasis> and can be
    useful for validation of large object graphs where one is only interested
    whether there is a constraint violation or not. <xref
    linkend="example-fail-fast-property" />, <xref
    linkend="example-fail-fast-configuration" /> and <xref
    linkend="example-fail-fast-factory" /> show multiple ways to enable the
    fail fast mode.</para>

    <example floatstyle="" id="example-fail-fast-property">
      <title>Enabling <option>failFast</option> via a property</title>

      <programlisting language="" role="">HibernateValidatorConfiguration configuration = Validation.byProvider( HibernateValidator.class ).configure();
ValidatorFactory factory = configuration.addProperty( "hibernate.validator.fail_fast", "true" ).buildValidatorFactory();
Validator validator = factory.getValidator();

// do some actual fail fast validation
...</programlisting>
    </example>

    <example id="example-fail-fast-configuration">
      <title>Enabling <option>failFast</option> at the
      <classname>Configuration</classname> level</title>

      <programlisting lang="">HibernateValidatorConfiguration configuration = Validation.byProvider( HibernateValidator.class ).configure();
ValidatorFactory factory = configuration.failFast( true ).buildValidatorFactory();
Validator validator = factory.getValidator();

// do some actual fail fast validation
...</programlisting>
    </example>

    <example id="example-fail-fast-factory">
      <title>Enabling <option>failFast</option> at the
      <classname>ValidatorFactory</classname> level</title>

      <programlisting language="" role="">HibernateValidatorConfiguration configuration = Validation.byProvider( HibernateValidator.class ).configure();
ValidatorFactory factory = configuration.buildValidatorFactory();

Validator validator = factory.getValidator();

// do some non fail fast validation
...

validator = factory.unwrap( HibernateValidatorFactory.class )
            .usingContext()
            .failFast( true )
            .getValidator();

// do fail fast validation
...</programlisting>
    </example>
  </section>

  <section id="programmaticapi">
    <title>Programmatic constraint definition</title>

    <para>Another addition to the Bean Validation specification is the ability
    to configure constraints via a fluent API.This API can be used exclusively
    or in combination with annotations and xml. If used in combination
    programmatic constraints are additive to constraints configured via the
    standard configuration capabilties.</para>

    <para>The programmatic API is centered around the
    <classname>ConstraintMapping</classname> class which can be found together
    with its supporting classes in the
    <package>org.hibernate.validator.cfg</package> package.
    <classname>ConstraintMapping</classname> is the entry point to a fluent
    API allowing the definition of constraints. <xref lang=""
    linkend="example-constraint-mapping" /> shows how the API can be
    used.</para>

    <para><example id="example-constraint-mapping">
        <title>Programmatic constraint definition</title>

        <programlisting language="" role="">ConstraintMapping mapping = new ConstraintMapping();
mapping.type( Car.class )
    .property( "manufacturer", FIELD )
        .constraint( NotNullDef.class )
    .property( "licensePlate", FIELD )
        .constraint( NotNullDef.class )
        .constraint( SizeDef.class )
            .min( 2 )
            .max( 14 )
    .property( "seatCount", FIELD )
        .constraint( MinDef.class )
            .value ( 2 )
.type( RentalCar.class )
    .property( "rentalStation", METHOD)
        .constraint( NotNullDef.class );      </programlisting>
      </example></para>

    <para>As you can see you can configure constraints on multiple classes and
    properties using method chaining. The constraint definition classes
    <classname>NotNullDef</classname>, <classname>SizeDef</classname> and
    <classname>MinDef</classname> are helper classes which allow to configure
    constraint parameters in a type-safe fashion. Definition classes exists
    for all built-in constraints in the
    <classname>org.hibernate.validator.cfg.defs</classname> package. For a
    custom constraint you can either create your own definition class
    extending <classname>ConstraintDef</classname> or you can use the
    <classname>genericConstraint</classname> method as seen in <xref
    linkend="example-generic-constraint-mapping" />.</para>

    <para><example id="example-generic-constraint-mapping">
        <title>Programmatic constraint definition using
        <classname>GenericConstraintDef</classname></title>

        <programlisting language="" role="">ConstraintMapping mapping = new ConstraintMapping();
mapping.type( Car.class )
    .property( "licensePlate", FIELD )
        .genericConstraint( CheckCase.class )
            .param( "value", CaseMode.UPPER );   </programlisting>
      </example></para>

    <para>Last but not least, you can also define cascading constraints as
    well as the default group sequence or the default group sequence provider
    of an entity.</para>

    <para><example>
        <title>Cascading constraints and default group redefinition</title>

        <programlisting language="" role="">ConstraintMapping mapping = new ConstraintMapping();
mapping.type( Car.class )
    .valid( "driver", FIELD )
.type( RentalCar.class)
    .defaultGroupSequence( RentalCar.class, CarChecks.class ); </programlisting>
      </example></para>

    <para><example>
        <title>Cascading constraints and dynamic default group
        redefinition</title>

        <programlisting language="" role="">ConstraintMapping mapping = new ConstraintMapping();
mapping.type( Car.class )
    .valid( "driver", FIELD )
.type( RentalCar.class)
    .defaultGroupSequenceProvider( RentalCarGroupSequenceProvider.class ); </programlisting>
      </example></para>

    <para>Once you have your <classname>ConstraintMapping</classname> you will
    have to pass it to the configuration. Since the programmatic configuration
    is not part of the official Bean Validation specification you will have to
    get hold of the Hibernate Validator specific configuration instance. See
    <xref linkend="example-hibernate-specific-config" />.</para>

    <para><example id="example-hibernate-specific-config">
        <title>Creating a Hibernate Validator specific configuration</title>

        <programlisting lang="" language="" role="">ConstraintMapping mapping = new ConstraintMapping();
// configure mapping instance

HibernateValidatorConfiguration config = Validation.byProvider( HibernateValidator.class ).configure();
config.addMapping( mapping );
ValidatorFactory factory = config.buildValidatorFactory();
Validator validator = factory.getValidator();</programlisting>
      </example></para>
  </section>

  <section>
    <title>Boolean composition for constraint composition</title>

    <para>As per Bean Validation specification the constraints of a composed
    constraint (see <xref linkend="section-constraint-composition" />) are all
    combined via a logical <emphasis>AND</emphasis>. This means all of the
    composing constraints need to return <constant>true</constant> in order
    for an overall successful validation. Hibernate Validator offers an
    extension to this logical <emphasis>AND</emphasis> combination which
    allows you to compose constraints via a logical <emphasis>OR</emphasis> or
    <emphasis>NOT</emphasis>. To do so you have to use the
    <classname>ConstraintComposition</classname> annotation and the enum
    <classname>CompositionType</classname> with its values
    <emphasis>AND</emphasis>, <emphasis>OR</emphasis> and
    <emphasis>ALL_FALSE</emphasis>. <xref
    linkend="example-boolean-constraint-composition" /> shows how to build a
    composing constraint where only one of the constraints has to be
    successful in order to pass the validation. Either the validated string is
    all lowercased or it is between two and three characters long.</para>

    <example id="example-boolean-constraint-composition">
      <title>OR composition of constraints</title>

      <programlisting language="JAVA" role="JAVA"><emphasis role="bold">@ConstraintComposition(OR)</emphasis>
@Pattern(regexp = "[a-z]")
@Size(min = 2, max = 3)
@ReportAsSingleViolation
@Target({ METHOD, FIELD })
@Retention(RUNTIME)
@Constraint(validatedBy = { })
public @interface PatternOrSize {
   public abstract String message() default "{PatternOrSize.message}";
   public abstract Class&lt;?&gt;[] groups() default { };
   public abstract Class&lt;? extends Payload&gt;[] payload() default { };
}</programlisting>
    </example>

    <tip>
      <para>Using <emphasis>ALL_FALSE</emphasis> as composition type
      implicitly enforces that only a single violation will get reported in
      case validation of the constraint composition fails.</para>
    </tip>
  </section>
</chapter>
