jakarta.validation.constraints.AssertFalse.message     = doit avoir la valeur faux
jakarta.validation.constraints.AssertTrue.message      = doit avoir la valeur vrai
jakarta.validation.constraints.DecimalMax.message      = doit \u00eatre inf\u00e9rieur ${inclusive == true ? 'ou \u00e9gal' : ''} \u00e0 {value}
jakarta.validation.constraints.DecimalMin.message      = doit \u00eatre sup\u00e9rieur ${inclusive == true ? 'ou \u00e9gal' : ''} \u00e0 {value}
jakarta.validation.constraints.Digits.message          = valeur num\u00e9rique hors limites (<{integer} chiffres>.<{fraction} chiffres> attendu)
jakarta.validation.constraints.Email.message           = doit \u00eatre une adresse \u00e9lectronique syntaxiquement correcte
jakarta.validation.constraints.Future.message          = doit \u00eatre une date dans le futur
jakarta.validation.constraints.FutureOrPresent.message = doit \u00eatre une date dans le pr\u00e9sent ou le futur
jakarta.validation.constraints.Max.message             = doit \u00eatre inf\u00e9rieur ou \u00e9gal \u00e0 {value}
jakarta.validation.constraints.Min.message             = doit \u00eatre sup\u00e9rieur ou \u00e9gal \u00e0 {value}
jakarta.validation.constraints.Negative.message        = doit \u00eatre inf\u00e9rieur \u00e0 0
jakarta.validation.constraints.NegativeOrZero.message  = doit \u00eatre inf\u00e9rieur ou \u00e9gal \u00e0 0
jakarta.validation.constraints.NotBlank.message        = ne doit pas \u00eatre vide
jakarta.validation.constraints.NotEmpty.message        = ne doit pas \u00eatre vide
jakarta.validation.constraints.NotNull.message         = ne doit pas \u00eatre nul
jakarta.validation.constraints.Null.message            = doit \u00EAtre nul
jakarta.validation.constraints.Past.message            = doit \u00eatre une date dans le pass\u00e9
jakarta.validation.constraints.PastOrPresent.message   = doit \u00eatre une date dans le pass\u00e9 ou le pr\u00e9sent
jakarta.validation.constraints.Pattern.message         = doit correspondre \u00e0 "{regexp}"
jakarta.validation.constraints.Positive.message        = doit \u00eatre sup\u00e9rieur \u00e0 0
jakarta.validation.constraints.PositiveOrZero.message  = doit \u00eatre sup\u00e9rieur ou \u00e9gal \u00e0 0
jakarta.validation.constraints.Size.message            = la taille doit \u00eatre comprise entre {min} et {max}

org.hibernate.validator.constraints.CreditCardNumber.message        = num\u00e9ro de carte de cr\u00e9dit non valide
org.hibernate.validator.constraints.Currency.message                = devise non valide (il doit s'agir de l'une des valeurs suivantes : {value})
org.hibernate.validator.constraints.EAN.message                     = code-barres {type} non valide
org.hibernate.validator.constraints.Email.message                   = doit \u00eatre une adresse \u00e9lectronique syntaxiquement correcte
org.hibernate.validator.constraints.ISBN.message                    = ISBN non valide
org.hibernate.validator.constraints.Length.message                  = la longueur doit \u00eatre comprise entre {min} et {max}
org.hibernate.validator.constraints.CodePointLength.message         = la longueur doit \u00eatre comprise entre {min} et {max}
org.hibernate.validator.constraints.LuhnCheck.message               = la cl\u00e9 de contr\u00f4le pour ${validatedValue} n'est pas valide ; la somme de contr\u00f4le de l'algorithme de Luhn (modulo 10) a \u00e9chou\u00e9
org.hibernate.validator.constraints.Mod10Check.message              = la cl\u00e9 de contr\u00f4le pour ${validatedValue} n'est pas valide ; la somme de contr\u00f4le de l'algorithme modulo 10 a \u00e9chou\u00e9
org.hibernate.validator.constraints.Mod11Check.message              = la cl\u00e9 de contr\u00f4le pour ${validatedValue} n'est pas valide ; la somme de contr\u00f4le de l'algorithme modulo 11 a \u00e9chou\u00e9
org.hibernate.validator.constraints.ModCheck.message                = la cl\u00e9 de contr\u00f4le pour ${validatedValue} n'est pas valide ; la somme de contr\u00f4le de l'algorithme {modType} a \u00e9chou\u00e9
org.hibernate.validator.constraints.NotBlank.message                = ne doit pas \u00eatre vide
org.hibernate.validator.constraints.NotEmpty.message                = ne doit pas \u00eatre vide
org.hibernate.validator.constraints.ParametersScriptAssert.message  = le script "{script}" n'a pas \u00E9t\u00E9 \u00E9valu\u00E9 \u00E0 vrai
org.hibernate.validator.constraints.Range.message                   = doit \u00eatre compris entre {min} et {max}
org.hibernate.validator.constraints.ScriptAssert.message            = le script "{script}" n'a pas \u00E9t\u00E9 \u00E9valu\u00E9 \u00E0 vrai
org.hibernate.validator.constraints.UniqueElements.message          = ne doit contenir que des \u00e9l\u00e9ments uniques
org.hibernate.validator.constraints.URL.message                     = doit \u00eatre une URL valide
org.hibernate.validator.constraints.UUID.message                    = doit \u00eatre une UUID valide

org.hibernate.validator.constraints.br.CNPJ.message                 = num\u00e9ro de registre d'entreprise contribuable br\u00e9silien non valide (CNPJ)
org.hibernate.validator.constraints.br.CPF.message                  = num\u00e9ro de registre de contribuable individuel br\u00e9silien non valide (CPF)
org.hibernate.validator.constraints.br.TituloEleitoral.message      = num\u00e9ro de carte d'\u00e9lecteur br\u00e9silien non valide

org.hibernate.validator.constraints.pl.REGON.message                = num\u00e9ro d'identification de contribuable polonais non valide (REGON)
org.hibernate.validator.constraints.pl.NIP.message                  = num\u00e9ro de TVA non valide (NIP)
org.hibernate.validator.constraints.pl.PESEL.message                = num\u00e9ro de carte d'identit\u00e9 nationale polonais non valide (PESEL)

org.hibernate.validator.constraints.ru.INN.message                  = num\u00e9ro d'identification de contribuable russe non valide (INN)

org.hibernate.validator.constraints.time.DurationMax.message        = doit \u00eatre plus court ${inclusive == true ? 'ou \u00e9gal \u00e0' : 'que'}${days == 0 ? '' : days == 1 ? ' 1 jour' : ' ' += days += ' jours'}${hours == 0 ? '' : hours == 1 ? ' 1 heure' : ' ' += hours += ' heures'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 seconde' : ' ' += seconds += ' secondes'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
org.hibernate.validator.constraints.time.DurationMin.message        = doit \u00eatre plus long ${inclusive == true ? 'ou \u00e9gal \u00e0' : 'que'}${days == 0 ? '' : days == 1 ? ' 1 jour' : ' ' += days += ' jours'}${hours == 0 ? '' : hours == 1 ? ' 1 heure' : ' ' += hours += ' heures'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 seconde' : ' ' += seconds += ' secondes'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
