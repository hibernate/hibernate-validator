javax.validation.constraints.AssertFalse.message = doit \u00EAtre faux
javax.validation.constraints.AssertTrue.message  = doit \u00EAtre vrai
javax.validation.constraints.DecimalMax.message  = doit \u00EAtre ${inclusive == false ? 'strictement ' : ''}inf\u00E9rieur ${inclusive == true ? 'ou \u00E9gal ' : ''}\u00E0 {value}
javax.validation.constraints.DecimalMin.message  = doit \u00EAtre ${inclusive == false ? 'strictement ' : ''}sup\u00E9rieur ${inclusive == true ? 'ou \u00E9gal ' : ''}\u00E0 {value}
javax.validation.constraints.Digits.message      = valeur num\u00E9rique hors limite (<{integer} chiffres>.<{fraction} chiffres> attendu)
javax.validation.constraints.Future.message      = doit \u00EAtre dans le futur
javax.validation.constraints.Max.message         = doit \u00EAtre au maximum \u00E9gal \u00E0 {value}
javax.validation.constraints.Min.message         = doit \u00EAtre au minimum \u00E9gal \u00E0 {value}
javax.validation.constraints.NotNull.message     = ne peut pas \u00EAtre nul
javax.validation.constraints.Null.message        = doit \u00EAtre nul
javax.validation.constraints.Past.message        = doit \u00EAtre dans le pass\u00E9
javax.validation.constraints.Pattern.message     = doit respecter "{regexp}"
javax.validation.constraints.Size.message        = la taille doit \u00EAtre comprise entre {min} et {max}

org.hibernate.validator.constraints.CreditCardNumber.message = num\u00E9ro de carte de cr\u00E9dit invalide
org.hibernate.validator.constraints.EAN.message              = code barre {type} invalide
org.hibernate.validator.constraints.Email.message            = adresse email mal form\u00E9e
org.hibernate.validator.constraints.Length.message           = la longueur doit \u00EAtre comprise entre {min} et {max} caractères
org.hibernate.validator.constraints.LuhnCheck.message        = le chiffre de contr\u00F4le pour ${validatedValue} est invalide, le contr\u00F4le Luhn Modulo 10 a \u00E9chou\u00E9
org.hibernate.validator.constraints.Mod10Check.message       = le chiffre de contr\u00F4le pour ${validatedValue} est invalide, le contr\u00F4le Modulo 10 a \u00E9chou\u00E9
org.hibernate.validator.constraints.Mod11Check.message       = le chiffre de contr\u00F4le pour ${validatedValue} est invalide, le contr\u00F4le Modulo 11 a \u00E9chou\u00E9
org.hibernate.validator.constraints.ModCheck.message         = le chiffre de contr\u00F4le pour ${validatedValue} est invalide, le contr\u00F4le ${modType} a \u00E9chou\u00E9
org.hibernate.validator.constraints.NotBlank.message         = ne peut pas \u00EAtre vide
org.hibernate.validator.constraints.NotEmpty.message         = ne peut pas \u00EAtre vide
org.hibernate.validator.constraints.ParametersScriptAssert.message  = le script "{script}" n'a pas \u00E9t\u00E9 \u00E9valu\u00E9 \u00E0 vrai
org.hibernate.validator.constraints.Range.message            = doit \u00EAtre entre {min} et {max}
org.hibernate.validator.constraints.SafeHtml.message         = peut contenir du HTML dangereux
org.hibernate.validator.constraints.ScriptAssert.message     = le script "{script}" n'a pas \u00E9t\u00E9 \u00E9valu\u00E9 \u00E0 vrai
org.hibernate.validator.constraints.URL.message              = URL mal form\u00E9e
org.hibernate.validator.constraints.NumberPattern.message    = doit respecter "{regexp}"

org.hibernate.validator.constraints.br.CNPJ.message                 = numéro d'enregistrement brésilien de société contribuable (CNPJ) invalide
org.hibernate.validator.constraints.br.CPF.message                  = numéro d'enregistrement brésilien de contribuable individuel (CPF) invalide
org.hibernate.validator.constraints.br.TituloEleitoral.message      = numéro de carte d'électeur brésilienne invalide
