jakarta.validation.constraints.AssertFalse.message     = deve essere false
jakarta.validation.constraints.AssertTrue.message      = deve essere true
jakarta.validation.constraints.DecimalMax.message      = deve essere inferiore a ${inclusive == true ? 'o uguale a ' : ''}{value}
jakarta.validation.constraints.DecimalMin.message      = deve essere superiore a ${inclusive == true ? 'o uguale a ' : ''}{value}
jakarta.validation.constraints.Digits.message          = valore numerico fuori dai limiti (previsto <{integer} digits>.<{fraction} digits>)
jakarta.validation.constraints.Email.message           = deve essere un indirizzo email nel formato corretto
jakarta.validation.constraints.Future.message          = deve essere una data nel futuro
jakarta.validation.constraints.FutureOrPresent.message = deve essere una data nel presente o nel futuro
jakarta.validation.constraints.Max.message             = deve essere inferiore o uguale a {value}
jakarta.validation.constraints.Min.message             = deve essere superiore o uguale a {value}
jakarta.validation.constraints.Negative.message        = deve essere inferiore a 0
jakarta.validation.constraints.NegativeOrZero.message  = deve essere inferiore o uguale a 0
jakarta.validation.constraints.NotBlank.message        = non deve essere spazio
jakarta.validation.constraints.NotEmpty.message        = non deve essere vuoto
jakarta.validation.constraints.NotNull.message         = non deve essere null
jakarta.validation.constraints.Null.message            = deve essere null
jakarta.validation.constraints.Past.message            = deve essere una data nel passato
jakarta.validation.constraints.PastOrPresent.message   = deve essere una data nel passato o nel presente
jakarta.validation.constraints.Pattern.message         = deve corrispondere a "{regexp}"
jakarta.validation.constraints.Positive.message        = deve essere superiore a 0
jakarta.validation.constraints.PositiveOrZero.message  = deve essere superiore o uguale a 0
jakarta.validation.constraints.Size.message            = la dimensione deve essere compresa tra {min} e {max}

org.hibernate.validator.constraints.CreditCardNumber.message        = numero carta di credito non valido
org.hibernate.validator.constraints.Currency.message                = valuta non valida (deve essere una di {value})
org.hibernate.validator.constraints.EAN.message                     = codicie a barre {type} non valido
org.hibernate.validator.constraints.Email.message                   = non \u00e8 un indirizzo email nel formato corretto
org.hibernate.validator.constraints.ISBN.message                    = ISBN non valido
org.hibernate.validator.constraints.Length.message                  = la lunghezza deve essere compresa tra {min} e {max}
org.hibernate.validator.constraints.CodePointLength.message         = la lunghezza deve essere compresa tra {min} e {max}
org.hibernate.validator.constraints.LuhnCheck.message               = la cifra di controllo per ${validatedValue} non \u00e8 valida, checksum Luhn Modulo 10 non riuscito
org.hibernate.validator.constraints.Mod10Check.message              = la cifra di controllo per ${validatedValue} non \u00e8 valida, checksum Modulo 10 non riuscito
org.hibernate.validator.constraints.Mod11Check.message              = la cifra di controllo per ${validatedValue} non \u00e8 valida, checksum Modulo 11 non riuscito
org.hibernate.validator.constraints.ModCheck.message                = la cifra di controllo per ${validatedValue} non \u00e8 valida, checksum {modType} non riuscito
org.hibernate.validator.constraints.NotBlank.message                = non deve essere spazio
org.hibernate.validator.constraints.NotEmpty.message                = non deve essere vuoto
org.hibernate.validator.constraints.ParametersScriptAssert.message  = espressione script "{script}" non valutata true
org.hibernate.validator.constraints.Range.message                   = deve essere compresa tra {min} e {max}
org.hibernate.validator.constraints.ScriptAssert.message            = espressione script "{script}" non valutata true
org.hibernate.validator.constraints.UniqueElements.message          = deve contenere solo elementi univoci
org.hibernate.validator.constraints.URL.message                     = deve essere un URL valido
org.hibernate.validator.constraints.UUID.message                    = deve essere un UUID valido

org.hibernate.validator.constraints.br.CNPJ.message                 = numero registro contribuente aziendale (CNPJ) brasiliano non valido
org.hibernate.validator.constraints.br.CPF.message                  = numero registro contribuente individuale (CPF) brasiliano non valido
org.hibernate.validator.constraints.br.TituloEleitoral.message      = numero scheda ID votante brasiliano non valido

org.hibernate.validator.constraints.pl.REGON.message                = numero identificativo contribuente polacco (REGON) non valido
org.hibernate.validator.constraints.pl.NIP.message                  = numero identificativo IVA (NIP) non valido
org.hibernate.validator.constraints.pl.PESEL.message                = numero identificativo nazionale polacco (PESEL) non valido

org.hibernate.validator.constraints.ru.INN.message                  = numero identificativo contribuente russo (INN) non valido

org.hibernate.validator.constraints.time.DurationMax.message        = deve essere inferiore a ${inclusive == true ? ' o uguale a' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
org.hibernate.validator.constraints.time.DurationMin.message        = deve essere superiore a ${inclusive == true ? ' o uguale a' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
