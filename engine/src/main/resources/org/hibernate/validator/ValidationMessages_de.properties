javax.validation.constraints.AssertFalse.message    = muss falsch sein
javax.validation.constraints.AssertTrue.message     = muss wahr sein
javax.validation.constraints.DecimalMax.message     = muss kleiner ${strict == false ? 'oder gleich ' : ''}{value} sein
javax.validation.constraints.DecimalMin.message     = muss gr\u00F6\u00DFer ${inclusive == true ? 'oder gleich ' : ''}{value} sein
javax.validation.constraints.Digits.message         = numerischer Wert au\u00DFerhalb erlaubten Wertebereichs (<{integer} Ziffern>,<{fraction} Ziffern> erwartet)
javax.validation.constraints.Email.message          = keine g\u00FCltige E-Mail-Adresse
javax.validation.constraints.Future.message         = muss in der Zukunft liegen
javax.validation.constraints.FutureOrPresent.message = muss in der Gegenwart oder Zukunft liegen
javax.validation.constraints.Max.message            = muss kleiner oder gleich {value} sein
javax.validation.constraints.Min.message            = muss gr\u00F6\u00DFer oder gleich {value} sein
javax.validation.constraints.Negative.message       = muss kleiner 0 sein
javax.validation.constraints.NegativeOrZero.message = muss kleiner oder gleich 0 sein
javax.validation.constraints.NotBlank.message       = darf nicht leer sein
javax.validation.constraints.NotEmpty.message       = darf nicht leer sein
javax.validation.constraints.NotNull.message        = darf nicht null sein
javax.validation.constraints.Null.message           = muss null sein
javax.validation.constraints.Past.message           = muss in der Vergangenheit liegen
javax.validation.constraints.PastOrPresent.message  = muss in der Gegenwart oder Vergangenheit liegen
javax.validation.constraints.Pattern.message        = muss auf Ausdruck "{regexp}" passen
javax.validation.constraints.Positive.message       = muss gr\u00F6\u00DFer 0 sein
javax.validation.constraints.PositiveOrZero.message = muss gr\u00F6\u00DFer oder gleich 0 sein
javax.validation.constraints.Size.message           = muss zwischen {min} und {max} liegen

org.hibernate.validator.constraints.CreditCardNumber.message = ung\u00FCltige Kreditkartennummer
org.hibernate.validator.constraints.Currency.message         = ung\u00FCltige W\u00E4hrung (erlaubte Werte: {value})
org.hibernate.validator.constraints.EAN.message              = ung\u00FCltiger {type} Barcode
org.hibernate.validator.constraints.Email.message            = keine g\u00FCltige E-Mail-Adresse
org.hibernate.validator.constraints.Length.message           = muss zwischen {min} und {max} Zeichen lang sein
org.hibernate.validator.constraints.CodePointLength.message  = muss zwischen {min} und {max} Zeichen lang sein
org.hibernate.validator.constraints.NotBlank.message         = darf nicht leer sein
org.hibernate.validator.constraints.NotEmpty.message         = darf nicht leer sein
org.hibernate.validator.constraints.ParametersScriptAssert.message = Skriptausdruck "{script}" gab nicht true zur\u00FCck
org.hibernate.validator.constraints.Range.message            = muss zwischen {min} und {max} liegen
org.hibernate.validator.constraints.SafeHtml.message         = k\u00F6nnte unsicheren HTML-Inhalt haben
org.hibernate.validator.constraints.ScriptAssert.message     = Skriptausdruck "{script}" gab nicht true zur\u00FCck
org.hibernate.validator.constraints.UniqueElements.message   = darf keine Duplikate enthalten
org.hibernate.validator.constraints.URL.message              = muss eine g\u00FCltige URL sein

org.hibernate.validator.constraints.time.DurationMax.message        = muss k\u00FCrzer${inclusive == true ? ' oder gleich' : ' als'}${days == 0 ? '' : days == 1 ? ' 1 Tag' : ' ' += days += ' Tage'}${hours == 0 ? '' : hours == 1 ? ' 1 Stunde' : ' ' += hours += ' Stunden'}${minutes == 0 ? '' : minutes == 1 ? ' 1 Minute' : ' ' += minutes += ' Minuten'}${seconds == 0 ? '' : seconds == 1 ? ' 1 Sekunde' : ' ' += seconds += ' Sekunden'}${millis == 0 ? '' : millis == 1 ? ' 1 Millisekunde' : ' ' += millis += ' Millisekunden'}${nanos == 0 ? '' : nanos == 1 ? ' 1 Nanosekunde' : ' ' += nanos += ' Nanosekunden'} sein
org.hibernate.validator.constraints.time.DurationMin.message        = muss l\u00E4nger${inclusive == true ? ' oder gleich' : ' als'}${days == 0 ? '' : days == 1 ? ' 1 Tag' : ' ' += days += ' Tage'}${hours == 0 ? '' : hours == 1 ? ' 1 Stunde' : ' ' += hours += ' Stunden'}${minutes == 0 ? '' : minutes == 1 ? ' 1 Minute' : ' ' += minutes += ' Minuten'}${seconds == 0 ? '' : seconds == 1 ? ' 1 Sekunde' : ' ' += seconds += ' Sekunden'}${millis == 0 ? '' : millis == 1 ? ' 1 Millisekunde' : ' ' += millis += ' Millisekunden'}${nanos == 0 ? '' : nanos == 1 ? ' 1 Nanosekunde' : ' ' += nanos += ' Nanosekunden'} sein
